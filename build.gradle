// Pull the plugin from Maven Central
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.5.1'
    }
}
// Invoke the plugin
apply plugin: 'js'

// Declare your sources
javascript.source {
    dev {
        js {
            srcDir ./
            include "*.js"
            exclude "*.min.js"
        }
    }
    prod {
        js {
            srcDir ./
            include "*.min.js"
        }
    }
}

task test(dependsOn: 'init') << {
	description = 'run QUnit tests and create JUnit test reports'

	def specs = []
	new File(testDir).eachFile {
		if (it.name.endsWith('.html')) {
			specs << it
		}
	}

	def phantomJsPath = "which phantomjs".execute().text.trim()
	def startTime = new Date().time
	def numFailures = 0
	def testsFailed = false
	specs.each { File spec ->
		print "Running ${spec.name}..."

		def outputFile = "${buildDir}/TEST-${spec.name.replace('-', '').replace('.html', '.xml')}"
		ant.exec(outputproperty: 'cmdOut', errorproperty: 'cmdErr',
				resultproperty: 'exitCode', failonerror: 'false', executable: phantomJsPath) {
			arg(value: 'test/lib/phantomjs-qunit-runner.js')
			arg(value: spec.canonicalPath)
		}
		// Check exit code
		if (ant.project.properties.exitCode != '0') {
			testsFailed = true
			numFailures++
			println 'FAILED'
		} else {
			println 'PASSED'
		}

		new File(outputFile).write(ant.project.properties.cmdOut)
	}

	println "QUnit tests completed in ${new Date().time - startTime}ms"
	println "QUnit Tests ${testsFailed ? 'FAILED' : 'PASSED'} - view reports in ${buildDir}"
	ant.fail(if: testsFailed, message: 'JS Tests Failed')
}